


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este é um projeto template.
    7 00000000         
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declarações EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definições de Valores
   17 00000000         
   18 00000000         
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; Área de Dados - Declarações de variáveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variável for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posição da RAM  
   28 00000000         
   29 00000000         ; ------------------------------------------------------
                       -------------------------
   30 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   31 00000000         ;                  código
   32 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   33 00000000         
   34 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   35 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   36 00000000         ; outro arquivo. No caso startup.s
   37 00000000         
   38 00000000         ; Se chamar alguma função externa 
   39 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   40 00000000         ; função <func>
   41 00000000                 IMPORT           PLL_Init
   42 00000000                 IMPORT           SysTick_Init
   43 00000000                 IMPORT           SysTick_Wait1ms
   44 00000000                 IMPORT           GPIO_Init
   45 00000000                 IMPORT           PortJ_Input
   46 00000000                 IMPORT           Port_Output



ARM Macro Assembler    Page 2 


   47 00000000         ; ****************************************
   48 00000000         ; Importar as funções declaradas em outros arquivos
   49 00000000         ; ****************************************
   50 00000000         
   51 00000000         
   52 00000000         ; ------------------------------------------------------
                       -------------------------
   53 00000000         ; Função main()
   54 00000000         Start
   55 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   56 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   57 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   58 0000000C         ; ****************************************
   59 0000000C         ; Fazer as demais inicializações aqui.
   60 0000000C         ; ****************************************
   61 0000000C         
   62 0000000C         ;INICIANDO VARIAVEIS PASSEIO DO CAVALEIRO
   63 0000000C F04F 0408       MOV              R4, #2_00001000 ;estado inicial
                                                            
   64 00000010 F04F 0500       MOV              R5, #0      ;direção: 0=direita
                                                            , 1=esquerda
   65 00000014 F04F 0600       MOV              R6, #0      ;guarda o tipo da e
                                                            xecução 0=cavaleiro
                                                            , 1=contagem
   66 00000018 F04F 0700       MOV              R7, #0      ;registrador do con
                                                            ta binária
   67 0000001C F44F 787A       MOV              R8, #1000   ;velocidade inicial
                                                            
   68 00000020         
   69 00000020         MainLoop
   70 00000020         ; ****************************************
   71 00000020         ; Escrever código o loop principal aqui. 
   72 00000020         ; ****************************************
   73 00000020         
   74 00000020 4640            MOV              R0, R8
   75 00000022 B500            PUSH             {LR}
   76 00000024 F7FF FFFE       BL               SysTick_Wait1ms
   77 00000028 F85D EB04       POP              {LR}
   78 0000002C F000 F803       BL               checar_inputs
   79 00000030 F000 F820       BL               acender_leds
   80 00000034         
   81 00000034 E7F4            B                MainLoop
   82 00000036         
   83 00000036         checar_inputs
   84 00000036 B500            PUSH             {LR}
   85 00000038 F7FF FFFE       BL               PortJ_Input
   86 0000003C F85D EB04       POP              {LR}
   87 00000040         ;checa se muda o tipo de execução
   88 00000040 F010 0101       ANDS             R1, R0, #2_00000001
   89 00000044 BF08            IT               EQ
   90 00000046 F086 0601       EOREQ            R6, R6, #1
   91 0000004A         



ARM Macro Assembler    Page 3 


   92 0000004A         ;mudar velociddade
   93 0000004A F010 0102       ANDS             R1, R0, #2_00000010
   94 0000004E D110            BNE              fim
   95 00000050         
   96 00000050 F5B8 7F7A       CMP              R8, #1000
   97 00000054 BF04            ITT              EQ
   98 00000056 F44F 78FA       MOVEQ            R8, #500
   99 0000005A E00A            BEQ              fim
  100 0000005C         
  101 0000005C F5B8 7FFA       CMP              R8, #500
  102 00000060 BF04            ITT              EQ
  103 00000062 F04F 08C8       MOVEQ            R8, #200
  104 00000066 E004            BEQ              fim
  105 00000068         
  106 00000068 F1B8 0FC8       CMP              R8, #200
  107 0000006C BF08            IT               EQ
  108 0000006E F44F 787A       MOVEQ            R8, #1000
  109 00000072         
  110 00000072         fim
  111 00000072 4770            BX               LR
  112 00000074         
  113 00000074         
  114 00000074         acender_leds
  115 00000074 2E01            CMP              R6, #1      ;Checa se é conta b
                                                            inária e vai para b
                                                            ranch conta_binária
                                                            
  116 00000076 D00A            BEQ              conta_binaria
  117 00000078         
  118 00000078         ;R5=DIREÇÃO, R4=ESTADO CAVALEIRO
  119 00000078 2D00            CMP              R5, #0
  120 0000007A BF0C            ITE              EQ
  121 0000007C 0864            LSREQ            R4, #1
  122 0000007E 0064            LSLNE            R4, #1
  123 00000080         
  124 00000080 2C01            CMP              R4, #2_00000001 ;SE O CAVELEIRO
                                                             ESTIVER NO EXTREMO
                                                             DA DIREITA MUDA A 
                                                            DIREÇÃO PARA A ESQU
                                                            ERDA
  125 00000082 BF08            IT               EQ
  126 00000084 2501            MOVEQ            R5, #1
  127 00000086         
  128 00000086 2C08            CMP              R4, #2_00001000 ;SE O CAVALEIRO
                                                             ESTIVER NO EXTREMO
                                                             DA ESQUERDA MUDA A
                                                             DIREÇÃO PARA A DIR
                                                            EITA  
  129 00000088 BF08            IT               EQ
  130 0000008A 2500            MOVEQ            R5, #0
  131 0000008C E004            B                leds
  132 0000008E         
  133 0000008E         
  134 0000008E         conta_binaria
  135 0000008E F107 0701       ADD              R7, #1
  136 00000092 2F10            CMP              R7, #16
  137 00000094 BF08            IT               EQ
  138 00000096 2700            MOVEQ            R7, #0
  139 00000098         



ARM Macro Assembler    Page 4 


  140 00000098         leds
  141 00000098 2E00            CMP              R6, #0      ;checa se o tipo da
                                                             execução é passo c
                                                            avaleiro
  142 0000009A BF0C            ITE              EQ
  143 0000009C 4620            MOVEQ            R0, R4
  144 0000009E 4638            MOVNE            R0, R7
  145 000000A0         
  146 000000A0 B500            PUSH             {LR}
  147 000000A2 F7FF FFFE       BL               Port_Output
  148 000000A6 F85D EB04       POP              {LR}
  149 000000AA         
  150 000000AA 4770            BX               LR
  151 000000AC         
  152 000000AC         
  153 000000AC         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  154 000000AC         ; Fim do Arquivo
  155 000000AC         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  156 000000AC                 ALIGN                        ;Garante que o fim 
                                                            da seção está alinh
                                                            ada 
  157 000000AC                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\main.d -o.\objects\main.o -IC:\Users\moise\AppData
\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 -ID:\KEIL\ARM\CMSIS
\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" -
-predefine="TM4C1294NCPDT SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 32 in file main.s
   Uses
      None
Comment: .text unused
MainLoop 00000020

Symbol: MainLoop
   Definitions
      At line 69 in file main.s
   Uses
      At line 81 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 54 in file main.s
   Uses
      At line 35 in file main.s
Comment: Start used once
acender_leds 00000074

Symbol: acender_leds
   Definitions
      At line 114 in file main.s
   Uses
      At line 79 in file main.s
Comment: acender_leds used once
checar_inputs 00000036

Symbol: checar_inputs
   Definitions
      At line 83 in file main.s
   Uses
      At line 78 in file main.s
Comment: checar_inputs used once
conta_binaria 0000008E

Symbol: conta_binaria
   Definitions
      At line 134 in file main.s
   Uses
      At line 116 in file main.s
Comment: conta_binaria used once
fim 00000072

Symbol: fim
   Definitions
      At line 110 in file main.s
   Uses
      At line 94 in file main.s
      At line 99 in file main.s
      At line 104 in file main.s

leds 00000098



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: leds
   Definitions
      At line 140 in file main.s
   Uses
      At line 131 in file main.s
Comment: leds used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 44 in file main.s
   Uses
      At line 57 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 41 in file main.s
   Uses
      At line 55 in file main.s
Comment: PLL_Init used once
PortJ_Input 00000000

Symbol: PortJ_Input
   Definitions
      At line 45 in file main.s
   Uses
      At line 85 in file main.s
Comment: PortJ_Input used once
Port_Output 00000000

Symbol: Port_Output
   Definitions
      At line 46 in file main.s
   Uses
      At line 147 in file main.s
Comment: Port_Output used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 42 in file main.s
   Uses
      At line 56 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 43 in file main.s
   Uses
      At line 76 in file main.s
Comment: SysTick_Wait1ms used once
6 symbols
349 symbols in table
